<%- include('partials/header'); -%>
<link rel="stylesheet" href="/stylesheets/dashboard.css">
  <!-- As a link -->
  <nav class="navbar navbar-dark bg-dark">
    <a class="navbar-brand" href="/dashboard">FAW</a>
    <a href="/about" class="nav-link">About me</a>
    <a href="/logout" class="my-2 my-lg-0 nav-link">Logout</a>
  </nav>
<div class="container">
    <div class="row">
        <div class="col-2">
            <img src="<%= currentUser.photo %>" alt="Profile Photo">
            <h1><%= currentUser.name %></h1>
        </div>
        <div class="col-5 d-flex justify-content-center">
            <div class="card bg-light mb-3" style="max-width: 18rem;">
                <div class="card-header text-light bg-dark" style="text-align: center;">FIT AT WORK</div>
                <div class="card-body">
                    <h5 class="card-title" style="text-align: center;">Fit reminder to take a break</h5>
                    <div class="card-text timer controls d-flex flex-column justify-content-center">
                        <label for="duration" style="margin: 1em auto; font-size: 12px; text-align: center;">Enter your concentration time span here:</label>
                        <input id="duration" name="time" autocomplete="off" placeholder="20mins(recommended)" style="margin-bottom: 1em;">
                        <div class="d-flex justify-content-around">
                            <button id="start" style="border: 0; background-color: #F8F9FA;"><i class="fas fa-play"></i></button>
                            <button id="pause" style="border: 0; background-color: #F8F9FA;"><i class="fas fa-pause"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-5 d-flex justify-content-center">
            <canvas id="myChart" width="400" height="400"></canvas>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-backdrop="static" tabindex="-1" role="dialog"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Time to take a break</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Your reminder set has timed out! It is recommended that you take a break, stretch, have some water
                or a walk around before you get back to work!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal">Okay</button>
            </div>
        </div>
    </div>
</div>

<script defer type="text/javascript">

    class Timer {
        constructor(durationInput, startButton, pauseButton, callbacks) {
            this.durationInput = durationInput;
            this.startButton = startButton;
            this.pauseButton = pauseButton;
            if (callbacks) {
                this.onStart = callbacks.onStart;
                this.onTick = callbacks.onTick;
                this.onComplete = callbacks.onComplete;
            }

            this.startButton.addEventListener('click', this.start);
            this.pauseButton.addEventListener('click', this.pause);
            this.durationInput.addEventListener('click', this.pause);
        }

        start = () => {
            if (this.onStart) {
                this.onStart(this.timeRemaining);
            }
            this.tick();
            this.interval = setInterval(this.tick, 1000);
        };

        pause = () => {
            clearInterval(this.interval);
        };

        tick = () => {
            if (this.timeRemaining <= 0) {
                this.pause();
                if (this.onComplete) {
                    this.onComplete();
                }
            }
            else {
                if (this.timeRemaining - Math.floor(this.timeRemaining) > 0.60)
                    this.timeRemaining = Math.floor(this.timeRemaining) + 0.60;

                if (this.timeRemaining === Math.floor(this.timeRemaining)) {
                    this.timeRemaining--;
                    this.timeRemaining += 0.60;
                }

                this.timeRemaining = this.timeRemaining - 0.01;
                console.log(this.timeRemaining);
                if (this.onTick) {
                    this.onTick(this.timeRemaining);
                }
            }
        };

        get timeRemaining() {
            return parseFloat(this.durationInput.value);
        }

        set timeRemaining(time) {
            this.durationInput.value = time.toFixed(2);
        }
    }

    const durationInput = document.querySelector('#duration');
    const startButton = document.querySelector('#start');
    const pauseButton = document.querySelector('#pause');

    const timer = new Timer(durationInput, startButton, pauseButton, {
        onStart(totalDuration) {
            duration = totalDuration;
        },
        onTick(timeRemaining) {
        },
        onComplete() {
            $("#staticBackdrop").modal();
        }
    });

</script>

<script src="/js/darkmode-js.min.js"></script>
<script src="/js/Chart.min.js"></script>
<script>
var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ['03/05/2020', '04/05/2020', '05/05/2020', '06/05/2020', '07/05/2020', '08/05/2020'],
        datasets: [{
            label: 'Time spent on-screen (in Hrs)',
            data: [7, 8, 7.25, 9, 8.5, 9.5],
            backgroundColor: [
                'rgba(255, 99, 132, 0.4)',
                'rgba(54, 162, 235, 0.4)',
                'rgba(255, 206, 86, 0.4)',
                'rgba(75, 192, 192, 0.4)',
                'rgba(153, 102, 255, 0.4)',
                'rgba(255, 159, 64, 0.4)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>
<script>
    var options = {
  bottom: '64px', // default: '32px'
  right: 'unset', // default: '32px'
  left: '32px', // default: 'unset'
  time: '0.5s', // default: '0.3s'
  mixColor: '#fff', // default: '#fff'
  backgroundColor: '#fff',  // default: '#fff'
  buttonColorDark: '#100f2c',  // default: '#100f2c'
  buttonColorLight: '#fff', // default: '#fff'
  saveInCookies: false, // default: true,
  label: 'ðŸŒ“', // default: ''
  autoMatchOsTheme: true // default: true
}

const darkmode = new Darkmode(options);
darkmode.showWidget();
</script>



<%- include('partials/footer'); -%>